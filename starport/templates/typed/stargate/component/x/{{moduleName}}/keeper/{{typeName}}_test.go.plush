package keeper

import (
	"testing"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/stretchr/testify/assert"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func createN<%= TypeName.UpperCamel %>(keeper *Keeper, ctx sdk.Context, n int) []types.<%= TypeName.UpperCamel %> {
	items := make([]types.<%= TypeName.UpperCamel %>, n)
	for i := range items {
		items[i].Creator = "any"
		items[i].Id = keeper.Append<%= TypeName.UpperCamel%>(ctx, items[i])
	}
	return items
}

func Test<%= TypeName.UpperCamel %>Get(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= TypeName.UpperCamel %>(keeper, ctx, 10)
	for _, item := range items {
		assert.Equal(t, item, keeper.Get<%= TypeName.UpperCamel %>(ctx, item.Id))
	}
}

func Test<%= TypeName.UpperCamel %>Exist(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= TypeName.UpperCamel %>(keeper, ctx, 10)
	for _, item := range items {
		assert.True(t, keeper.Has<%= TypeName.UpperCamel %>(ctx, item.Id))
	}
}

func Test<%= TypeName.UpperCamel %>Remove(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= TypeName.UpperCamel %>(keeper, ctx, 10)
	for _, item := range items {
		keeper.Remove<%= TypeName.UpperCamel %>(ctx, item.Id)
		assert.False(t, keeper.Has<%= TypeName.UpperCamel %>(ctx, item.Id))
	}
}

func Test<%= TypeName.UpperCamel %>GetAll(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= TypeName.UpperCamel %>(keeper, ctx, 10)
	assert.Equal(t, items, keeper.GetAll<%= TypeName.UpperCamel %>(ctx))
}

func Test<%= TypeName.UpperCamel %>Count(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= TypeName.UpperCamel %>(keeper, ctx, 10)
	count := uint64(len(items))
	assert.Equal(t, count, keeper.Get<%= TypeName.UpperCamel %>Count(ctx))
}
