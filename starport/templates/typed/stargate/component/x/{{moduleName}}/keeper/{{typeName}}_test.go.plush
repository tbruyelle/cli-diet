package keeper

import (
	"testing"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/stretchr/testify/assert"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func createN<%= title(TypeName) %>(keeper *Keeper, ctx sdk.Context, n int) []types.<%= title(TypeName) %> {
	items := make([]types.<%= title(TypeName) %>, n)
	for i := range items {
		items[i].Creator = "any"
		items[i].Id = keeper.Append<%= title(TypeName) %>(ctx, items[i])
	}
	return items
}

func Test<%= title(TypeName) %>Get(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= title(TypeName) %>(keeper, ctx, 10)
	for _, item := range items {
		assert.Equal(t, item, keeper.Get<%= title(TypeName) %>(ctx, item.Id))
	}
}

func Test<%= title(TypeName) %>Exist(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= title(TypeName) %>(keeper, ctx, 10)
	for _, item := range items {
		assert.True(t, keeper.Has<%= title(TypeName) %>(ctx, item.Id))
	}
}

func Test<%= title(TypeName) %>Remove(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= title(TypeName) %>(keeper, ctx, 10)
	for _, item := range items {
		keeper.Remove<%= title(TypeName) %>(ctx, item.Id)
		assert.False(t, keeper.Has<%= title(TypeName) %>(ctx, item.Id))
	}
}

func Test<%= title(TypeName) %>GetAll(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= title(TypeName) %>(keeper, ctx, 10)
	assert.Equal(t, items, keeper.GetAll<%= title(TypeName) %>(ctx))
}

func Test<%= title(TypeName) %>Count(t *testing.T) {
	keeper, ctx := setupKeeper(t)
	items := createN<%= title(TypeName) %>(keeper, ctx, 10)
	count := uint64(len(items))
	assert.Equal(t, count, keeper.Get<%= title(TypeName) %>Count(ctx))
}
