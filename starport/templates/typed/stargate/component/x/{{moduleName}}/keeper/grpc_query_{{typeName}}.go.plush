package keeper

import (
	"context"

	"github.com/cosmos/cosmos-sdk/store/prefix"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/cosmos/cosmos-sdk/types/query"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func (k Keeper) <%= TypeName.UpperCamel %>All(c context.Context, req *types.QueryAll<%= TypeName.UpperCamel %>Request) (*types.QueryAll<%= TypeName.UpperCamel %>Response, error) {
	if req == nil {
		return nil, status.Error(codes.InvalidArgument, "invalid request")
	}

	var <%= TypeName.LowerCamel %>s []*types.<%= TypeName.UpperCamel %>
	ctx := sdk.UnwrapSDKContext(c)

	store := ctx.KVStore(k.storeKey)
	<%= TypeName.LowerCamel %>Store := prefix.NewStore(store, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))

	pageRes, err := query.Paginate(<%= TypeName.LowerCamel %>Store, req.Pagination, func(key []byte, value []byte) error {
		var <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>
		if err := k.cdc.UnmarshalBinaryBare(value, &<%= TypeName.LowerCamel %>); err != nil {
			return err
		}

		<%= TypeName.LowerCamel %>s = append(<%= TypeName.LowerCamel %>s, &<%= TypeName.LowerCamel %>)
		return nil
	})

	if err != nil {
		return nil, status.Error(codes.Internal, err.Error())
	}

	return &types.QueryAll<%= TypeName.UpperCamel %>Response{<%= TypeName.UpperCamel %>: <%= TypeName.LowerCamel %>s, Pagination: pageRes}, nil
}

func (k Keeper) <%= TypeName.UpperCamel %>(c context.Context, req *types.QueryGet<%= TypeName.UpperCamel %>Request) (*types.QueryGet<%= TypeName.UpperCamel %>Response, error) {
	if req == nil {
		return nil, status.Error(codes.InvalidArgument, "invalid request")
	}

	var <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>
	ctx := sdk.UnwrapSDKContext(c)

    if !k.Has<%= TypeName.UpperCamel %>(ctx, req.Id) {
        return nil, sdkerrors.ErrKeyNotFound
    }

	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	k.cdc.MustUnmarshalBinaryBare(store.Get(Get<%= TypeName.UpperCamel %>IDBytes(req.Id)), &<%= TypeName.LowerCamel %>)

	return &types.QueryGet<%= TypeName.UpperCamel %>Response{<%= TypeName.UpperCamel %>: &<%= TypeName.LowerCamel %>}, nil
}
