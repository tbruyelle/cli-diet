package cli

import (
    "github.com/spf13/cobra"
	"github.com/spf13/cast"

	"github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/client/flags"
	"github.com/cosmos/cosmos-sdk/client/tx"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func CmdCreate<%= TypeName.UpperCamel %>() *cobra.Command {
    cmd := &cobra.Command{
		Use:   "create-<%= TypeName.Kebab %><%= for (i, index) in Indexes { %> [<%= index.Name.Kebab %>]<% } %><%= for (i, field) in Fields { %> [<%= field.Name.Kebab %>]<% } %>",
		Short: "Create a new <%= TypeName.Original %>",
		Args:  cobra.ExactArgs(<%= len(Fields) + len(Indexes) %>),
		RunE: func(cmd *cobra.Command, args []string) error {
            // Get indexes
        <%= for (i, index) in Indexes { %> index<%= index.Name.UpperCamel %>, err := <%= castArgs(index.Datatype, i) %>
            if err != nil {
                return err
            }
        <% } %>

            // Get value arguments
		<%= for (i, field) in Fields { %> args<%= field.Name.UpperCamel %>, err := <%= castArgs(field.Datatype, i+len(Indexes)) %>
			if err != nil {
				return err
			}
		<% } %>

			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgCreate<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %><%= for (i, field) in Fields { %>args<%= field.Name.UpperCamel %>,
			    <% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}

func CmdUpdate<%= TypeName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update-<%= TypeName.Kebab %><%= for (i, index) in Indexes { %> [<%= index.Name.Kebab %>]<% } %><%= for (i, field) in Fields { %> [<%= field.Name.Kebab %>]<% } %>",
		Short: "Update a <%= TypeName.Original %>",
		Args:  cobra.ExactArgs(<%= len(Fields) + len(Indexes) %>),
		RunE: func(cmd *cobra.Command, args []string) error {
            // Get indexes
        <%= for (i, index) in Indexes { %> index<%= index.Name.UpperCamel %>, err := <%= castArgs(index.Datatype, i) %>
            if err != nil {
                return err
            }
        <% } %>

            // Get value arguments
		<%= for (i, field) in Fields { %> args<%= field.Name.UpperCamel %>, err := <%= castArgs(field.Datatype, i+len(Indexes)) %>
			if err != nil {
				return err
			}
		<% } %>

			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgUpdate<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %><%= for (i, field) in Fields { %>args<%= field.Name.UpperCamel %>,
                <% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}

func CmdDelete<%= TypeName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "delete-<%= TypeName.Kebab %><%= for (i, index) in Indexes { %> [<%= index.Name.Kebab %>]<% } %>",
		Short: "Delete a <%= TypeName.Original %>",
		Args:  cobra.ExactArgs(<%= len(Indexes) %>),
		RunE: func(cmd *cobra.Command, args []string) error {
            <%= for (i, index) in Indexes { %> index<%= index.Name.UpperCamel %>, err := <%= castArgs(index.Datatype, i) %>
                if err != nil {
                    return err
                }
            <% } %>

			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgDelete<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}