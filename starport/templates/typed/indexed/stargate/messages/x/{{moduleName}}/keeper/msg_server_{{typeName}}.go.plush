package keeper

import (
    "fmt"
	"context"

    "<%= ModulePath %>/x/<%= ModuleName %>/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)


func (k msgServer) Create<%= title(TypeName) %>(goCtx context.Context,  msg *types.MsgCreate<%= title(TypeName) %>) (*types.MsgCreate<%= title(TypeName) %>Response, error) {
	ctx := sdk.UnwrapSDKContext(goCtx)

    // Check if the value already exists
    _, isFound := k.Get<%= title(TypeName) %>(ctx, msg.Index)
    if isFound {
        return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, fmt.Sprintf("index %v already set", msg.Index))
    }

    var <%= TypeName %> = types.<%= title(TypeName) %>{
        Index: msg.Index,
        Creator: msg.Creator,<%= for (field) in Fields { %>
        <%= title(field.Name) %>: msg.<%= title(field.Name) %>,<% } %>
    }

   k.Set<%= title(TypeName) %>(
   		ctx,
   		<%= TypeName %>,
   	)
	return &types.MsgCreate<%= title(TypeName) %>Response{}, nil
}

func (k msgServer) Update<%= title(TypeName) %>(goCtx context.Context,  msg *types.MsgUpdate<%= title(TypeName) %>) (*types.MsgUpdate<%= title(TypeName) %>Response, error) {
	ctx := sdk.UnwrapSDKContext(goCtx)

    // Check if the value exists
    valFound, isFound := k.Get<%= title(TypeName) %>(ctx, msg.Index)
    if !isFound {
        return nil, sdkerrors.Wrap(sdkerrors.ErrKeyNotFound, fmt.Sprintf("index %v not set", msg.Index))
    }

    // Checks if the the msg sender is the same as the current owner
    if msg.Creator != valFound.Creator {
        return nil, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, "incorrect owner")
    }

    var <%= TypeName %> = types.<%= title(TypeName) %>{
        Index: msg.Index,
		Creator: msg.Creator,<%= for (field) in Fields { %>
    	<%= title(field.Name) %>: msg.<%= title(field.Name) %>,<% } %>
	}

	k.Set<%= title(TypeName) %>(ctx, <%= TypeName %>)

	return &types.MsgUpdate<%= title(TypeName) %>Response{}, nil
}

func (k msgServer) Delete<%= title(TypeName) %>(goCtx context.Context,  msg *types.MsgDelete<%= title(TypeName) %>) (*types.MsgDelete<%= title(TypeName) %>Response, error) {
	ctx := sdk.UnwrapSDKContext(goCtx)

    // Check if the value exists
    valFound, isFound := k.Get<%= title(TypeName) %>(ctx, msg.Index)
    if !isFound {
        return nil, sdkerrors.Wrap(sdkerrors.ErrKeyNotFound, fmt.Sprintf("index %v not set", msg.Index))
    }

    // Checks if the the msg sender is the same as the current owner
    if msg.Creator != valFound.Creator {
        return nil, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, "incorrect owner")
    }

	k.Remove<%= title(TypeName) %>(ctx, msg.Index)

	return &types.MsgDelete<%= title(TypeName) %>Response{}, nil
}