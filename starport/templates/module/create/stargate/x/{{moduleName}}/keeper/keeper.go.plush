package keeper

import (
	"fmt"

	"github.com/tendermint/tendermint/libs/log"

	"github.com/cosmos/cosmos-sdk/codec"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= modulePath %>/x/<%= moduleName %>/types"
	<%= if (isIBC) { %>"github.com/tendermint/spm/ibckeeper"<% } %>
)

type (
	Keeper struct {
		<%= if (isIBC) { %>*ibckeeper.Keeper<% } %>
		cdc      codec.BinaryCodec
		storeKey sdk.StoreKey
		memKey   sdk.StoreKey
		<%= for (dependency) in dependencies { %>
        <%= dependency.Name %>Keeper types.<%= title(dependency.Name) %>Keeper<% } %>
	}
)

func NewKeeper(
    cdc codec.BinaryCodec,
    storeKey,
    memKey sdk.StoreKey,
    <%= if (isIBC) { %>channelKeeper ibckeeper.ChannelKeeper,
    portKeeper ibckeeper.PortKeeper,
    scopedKeeper ibckeeper.ScopedKeeper,<% } %>
    <%= for (dependency) in dependencies { %><%= dependency.Name %>Keeper types.<%= title(dependency.Name) %>Keeper,<% } %>
) *Keeper {
	return &Keeper{
		<%= if (isIBC) { %>Keeper: ibckeeper.NewKeeper(
			types.PortKey,
			storeKey,
			channelKeeper,
			portKeeper,
			scopedKeeper,
		),<% } %>
		cdc:      cdc,
		storeKey: storeKey,
		memKey:   memKey,
		<%= for (dependency) in dependencies { %><%= dependency.Name %>Keeper: <%= dependency.Name %>Keeper,<% } %>
	}
}

func (k Keeper) Logger(ctx sdk.Context) log.Logger {
	return ctx.Logger().With("module", fmt.Sprintf("x/%s", types.ModuleName))
}
