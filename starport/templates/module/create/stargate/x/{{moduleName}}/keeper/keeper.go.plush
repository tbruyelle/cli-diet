package keeper

import (
	"fmt"

	"github.com/tendermint/tendermint/libs/log"

	"github.com/cosmos/cosmos-sdk/codec"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= modulePath %>/x/<%= moduleName %>/types"
)

type (
	Keeper struct {
		cdc      codec.BinaryCodec
		storeKey sdk.StoreKey
		memKey   sdk.StoreKey
		<%= if (isIBC) { %>channelKeeper types.ChannelKeeper
        portKeeper    types.PortKeeper
        scopedKeeper  types.ScopedKeeper<% } %>
		<%= for (dependency) in dependencies { %>
        <%= dependency.Name %>Keeper types.<%= title(dependency.Name) %>Keeper<% } %>
	}
)

func NewKeeper(
    cdc codec.BinaryCodec,
    storeKey,
    memKey sdk.StoreKey,
    <%= if (isIBC) { %>channelKeeper types.ChannelKeeper,
    portKeeper types.PortKeeper,
    scopedKeeper types.ScopedKeeper,<% } %>
    <%= for (dependency) in dependencies { %><%= dependency.Name %>Keeper types.<%= title(dependency.Name) %>Keeper,<% } %>
) *Keeper {
	return &Keeper{
		cdc:      cdc,
		storeKey: storeKey,
		memKey:   memKey,
		<%= if (isIBC) { %>channelKeeper: channelKeeper,
        portKeeper:    portKeeper,
        scopedKeeper:  scopedKeeper,<% } %>
		<%= for (dependency) in dependencies { %><%= dependency.Name %>Keeper: <%= dependency.Name %>Keeper,<% } %>
	}
}

func (k Keeper) Logger(ctx sdk.Context) log.Logger {
	return ctx.Logger().With("module", fmt.Sprintf("x/%s", types.ModuleName))
}
