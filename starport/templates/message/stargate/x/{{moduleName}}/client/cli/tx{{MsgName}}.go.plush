package cli

import (
    "strconv"
	"github.com/spf13/cobra"

    "github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/client/flags"
	"github.com/cosmos/cosmos-sdk/client/tx"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

var _ = strconv.Itoa(0)

func Cmd<%= MsgName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "<%= MsgName.Kebab %><%= for (i, field) in Fields { %> [<%= field.Name.LowerCamel %>]<% } %>",
		Short: "<%= MsgDesc %>",
		Args:  cobra.ExactArgs(<%= len(Fields) %>),
		RunE: func(cmd *cobra.Command, args []string) error {
      <%= for (i, field) in Fields { %>args<%= field.Name.UpperCamel %><%= if (field.DatatypeName != "string") {%>, _<%}%> := <%= if (field.DatatypeName == "string") {%>string<%} else {%>strconv.Parse<%= title(field.DatatypeName) %><%}%>(args[<%= i %>]<%= if (field.DatatypeName == "int" || field.DatatypeName == "uint") {%>, 10, 64<%}%>)
      <% } %>
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsg<%= MsgName.UpperCamel %>(clientCtx.GetFromAddress().String()<%= for (i, field) in Fields { %>, <%= field.Datatype %>(args<%= field.Name.UpperCamel %>)<% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}