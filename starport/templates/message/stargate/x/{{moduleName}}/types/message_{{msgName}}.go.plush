package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &Msg<%= MsgName.UpperCamel %>{}

func NewMsg<%= MsgName.UpperCamel %>(creator string<%= for (field) in Fields { %>, <%= field.Name.LowerCamel %> <%= field.Datatype %><% } %>) *Msg<%= MsgName.UpperCamel %> {
  return &Msg<%= MsgName.UpperCamel %>{
		Creator: creator,<%= for (field) in Fields { %>
    <%= field.Name.UpperCamel %>: <%= field.Name.LowerCamel %>,<% } %>
	}
}

func (msg *Msg<%= MsgName.UpperCamel %>) Route() string {
  return RouterKey
}

func (msg *Msg<%= MsgName.UpperCamel %>) Type() string {
  return "<%= MsgName.UpperCamel %>"
}

func (msg *Msg<%= MsgName.UpperCamel %>) GetSigners() []sdk.AccAddress {
  creator, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    panic(err)
  }
  return []sdk.AccAddress{creator}
}

func (msg *Msg<%= MsgName.UpperCamel %>) GetSignBytes() []byte {
  bz := ModuleCdc.MustMarshalJSON(msg)
  return sdk.MustSortJSON(bz)
}

func (msg *Msg<%= MsgName.UpperCamel %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.Creator)
  	if err != nil {
  		return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
  	}
  return nil
}

